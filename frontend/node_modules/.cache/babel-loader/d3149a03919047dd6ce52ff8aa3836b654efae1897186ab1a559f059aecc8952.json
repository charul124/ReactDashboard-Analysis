{"ast":null,"code":"var _jsxFileName = \"/Users/caletiwar/Desktop/Dashboard-Builder-React-charul/frontend/src/components/TableModal.jsx\",\n  _s = $RefreshSig$();\nimport Modal from 'react-modal';\nimport PropTypes from 'prop-types';\nimport TableData from '../data/tableData.json';\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TableModal({\n  id,\n  setHeadings,\n  IsOpen,\n  setIsOpen,\n  handleHeadings\n}) {\n  _s();\n  // State to store selected table headings\n  const [selectedHeadings, setSelectedHeadings] = useState([]);\n  useEffect(() => {\n    // Extract and store all unique headings from TableData when the modal opens\n    console.log(\"The headings are being stored\");\n    const newHeadings = [];\n    Object.values(TableData).forEach(row => {\n      Object.keys(row).forEach(key => {\n        if (!newHeadings.includes(key)) {\n          newHeadings.push(key);\n        }\n      });\n    });\n    console.log(\"The new Headings are : \", newHeadings);\n    setSelectedHeadings(newHeadings);\n  }, [IsOpen]); // Runs whenever modal visibility changes\n\n  const handleHeadingChange = event => {\n    const {\n      name,\n      checked\n    } = event.target;\n\n    // Update selectedHeadings state based on checkbox status\n    setSelectedHeadings(prevState => checked ? [...prevState, name] : prevState.filter(heading => heading !== name));\n  };\n\n  //Saves the selected headings and updates parent state.\n  const handleSave = () => {\n    setHeadings(selectedHeadings);\n    console.log(\"Selected headings are : \", selectedHeadings);\n    handleHeadings(id, selectedHeadings); // Call parent function to store selection\n    closeModal();\n  };\n\n  //Closes the modal.\n  function closeModal() {\n    setIsOpen(false);\n  }\n\n  // Modal styles to provide overlay effect\n  const modalStyles = {\n    overlay: {\n      backgroundColor: 'rgba(0, 0, 0, 0.5)'\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Modal, {\n      className: \"w-1/2 absolute top-24 left-1/4 text-center bg-white shadow rounded p-10\",\n      isOpen: IsOpen,\n      style: modalStyles,\n      onRequestClose: closeModal,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"font-bold mb-3\",\n        children: \"Select the columns you want to display\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), selectedHeadings === null || selectedHeadings === void 0 ? void 0 : selectedHeadings.map(element => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-between\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: element,\n          children: element\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: handleHeadingChange,\n          type: \"checkbox\",\n          name: element,\n          checked: selectedHeadings.includes(element)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 25\n        }, this)]\n      }, element, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"bg-[#062F6F] hover:bg-[#5779E8] text-white rounded w-full p-1 mt-4\",\n        onClick: handleSave,\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n}\n\n// Define prop types for type safety\n_s(TableModal, \"HzCzCcqg9x88vliTJrcM6ZlcdnM=\");\n_c = TableModal;\nTableModal.propTypes = {\n  id: PropTypes.string.isRequired,\n  headings: PropTypes.array,\n  IsOpen: PropTypes.bool,\n  setIsOpen: PropTypes.func,\n  setHeadings: PropTypes.func,\n  handleHeadings: PropTypes.func\n};\nexport default TableModal;\nvar _c;\n$RefreshReg$(_c, \"TableModal\");","map":{"version":3,"names":["Modal","PropTypes","TableData","React","useState","useEffect","jsxDEV","_jsxDEV","TableModal","id","setHeadings","IsOpen","setIsOpen","handleHeadings","_s","selectedHeadings","setSelectedHeadings","console","log","newHeadings","Object","values","forEach","row","keys","key","includes","push","handleHeadingChange","event","name","checked","target","prevState","filter","heading","handleSave","closeModal","modalStyles","overlay","backgroundColor","children","className","isOpen","style","onRequestClose","fileName","_jsxFileName","lineNumber","columnNumber","map","element","htmlFor","onChange","type","onClick","_c","propTypes","string","isRequired","headings","array","bool","func","$RefreshReg$"],"sources":["/Users/caletiwar/Desktop/Dashboard-Builder-React-charul/frontend/src/components/TableModal.jsx"],"sourcesContent":["import Modal from 'react-modal';\nimport PropTypes from 'prop-types';\nimport TableData from '../data/tableData.json';\nimport React, { useState, useEffect } from 'react';\n\n\nfunction TableModal({ id, setHeadings, IsOpen, setIsOpen, handleHeadings }) {\n    // State to store selected table headings\n    const [selectedHeadings, setSelectedHeadings] = useState([]);\n\n    useEffect(() => {\n        // Extract and store all unique headings from TableData when the modal opens\n        console.log(\"The headings are being stored\");\n        const newHeadings = [];\n\n        Object.values(TableData).forEach((row) => {\n            Object.keys(row).forEach((key) => {\n                if (!newHeadings.includes(key)) {\n                    newHeadings.push(key);\n                }\n            });\n        });\n\n        console.log(\"The new Headings are : \", newHeadings);\n        setSelectedHeadings(newHeadings);\n    }, [IsOpen]); // Runs whenever modal visibility changes\n\n    const handleHeadingChange = (event) => {\n        const { name, checked } = event.target;\n\n        // Update selectedHeadings state based on checkbox status\n        setSelectedHeadings(prevState => \n            checked ? [...prevState, name] : prevState.filter(heading => heading !== name)\n        );\n    };\n\n    //Saves the selected headings and updates parent state.\n    const handleSave = () => {\n        setHeadings(selectedHeadings);\n        console.log(\"Selected headings are : \", selectedHeadings);\n        handleHeadings(id, selectedHeadings); // Call parent function to store selection\n        closeModal();\n    };\n\n    //Closes the modal.\n    function closeModal() {\n        setIsOpen(false);\n    }\n\n    // Modal styles to provide overlay effect\n    const modalStyles = {\n        overlay: {\n            backgroundColor: 'rgba(0, 0, 0, 0.5)',\n        },\n    };\n    \n    return (\n        <div>\n            <Modal\n                className=\"w-1/2 absolute top-24 left-1/4 text-center bg-white shadow rounded p-10\"\n                isOpen={IsOpen}\n                style={modalStyles}\n                onRequestClose={closeModal}>\n                \n                {/* Modal Header */}\n                <h1 className='font-bold mb-3'>Select the columns you want to display</h1>\n                \n                {/* Render checkboxes for each heading */}\n                {selectedHeadings?.map(element => (\n                    <div className='flex justify-between' key={element}> \n                        <label htmlFor={element}>{element}</label>\n                        <input \n                            onChange={handleHeadingChange} \n                            type=\"checkbox\" \n                            name={element} \n                            checked={selectedHeadings.includes(element)}\n                        />\n                    </div>\n                ))}\n                \n                {/* Save button to confirm selected headings */}\n                <button className='bg-[#062F6F] hover:bg-[#5779E8] text-white rounded w-full p-1 mt-4' onClick={handleSave}>\n                    Save\n                </button>\n            </Modal>\n        </div>\n    );\n}\n\n// Define prop types for type safety\nTableModal.propTypes = {\n    id: PropTypes.string.isRequired,\n    headings: PropTypes.array, \n    IsOpen: PropTypes.bool,\n    setIsOpen: PropTypes.func, \n    setHeadings: PropTypes.func, \n    handleHeadings: PropTypes.func,\n};\n\nexport default TableModal;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}