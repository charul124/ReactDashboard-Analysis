{"ast":null,"code":"var _jsxFileName = \"/Users/caletiwar/Desktop/Dashboard-Builder-React-charul/frontend/src/components/CreateModal.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport React from \"react\";\nimport Modal from 'react-modal';\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CreateModal({\n  dashboards,\n  setDashboards,\n  modalIsOpen,\n  setIsOpen\n}) {\n  _s();\n  const [name, setName] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [path, setPath] = useState(\"\");\n  const navigate = useNavigate();\n  const widgets = {\n    \"Table\": [],\n    \"Chart\": []\n  };\n  useEffect(() => {\n    // Fetch dashboards from backend and update state\n    const fetchDashboards = async () => {\n      try {\n        const response = await fetch('http://localhost:3003/');\n        const data = await response.json();\n        setDashboards(data);\n      } catch (err) {\n        console.error(\"Error fetching dashboards:\", err);\n      }\n    };\n    fetchDashboards();\n  }, [setDashboards]);\n  const dashboardData = async e => {\n    e.preventDefault();\n    try {\n      const requestBody = {\n        name,\n        description,\n        path,\n        widgets: {\n          Table: [],\n          Chart: []\n        } // Ensure widgets structure is included\n      };\n      console.log(\"Request Body:\", requestBody);\n      let result = await fetch('http://localhost:3003/post', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(requestBody)\n      });\n      result = await result.json();\n      console.log(\"Response:\", result);\n      setDashboards([...dashboards, result]);\n      setName(\"\");\n      setDescription(\"\");\n      setPath(\"\");\n      closeModal();\n      navigate(`/dashboard/${result.path}`);\n    } catch (err) {\n      console.error(\"Error posting dashboard:\", err);\n    }\n  };\n  function closeModal() {\n    setIsOpen(false);\n  }\n  const modalStyles = {\n    overlay: {\n      backgroundColor: 'rgba(0, 0, 0, 0.5)'\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Modal, {\n      className: \"h-1/2 absolute top-24 left-1/3 rounded w-1/3 bg-slate-50 shadow\",\n      isOpen: modalIsOpen,\n      onRequestClose: closeModal,\n      style: modalStyles,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-3\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          className: \"p-5\",\n          onSubmit: dashboardData,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex mb-3 flex-col\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"text-lg font-bold\",\n              htmlFor: \"dashboard-name\",\n              children: \"Dashboard Name:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"rounded p-2 border\",\n              onChange: e => setName(e.target.value),\n              placeholder: \"Your Dashboard Name\",\n              type: \"text\",\n              value: name,\n              name: \"dashboard-name\",\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex mb-3 flex-col\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"text-lg font-bold\",\n              htmlFor: \"dashboard-description\",\n              children: \"Dashboard Description:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n              className: \"rounded p-2 border\",\n              onChange: e => setDescription(e.target.value),\n              placeholder: \"Add Description\",\n              name: \"dashboard-description\",\n              value: description,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex flex-col\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"text-lg font-bold\",\n              htmlFor: \"dashboard-path\",\n              children: \"Dashboard Path:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"rounded p-2 border\",\n              onChange: e => setPath(e.target.value),\n              placeholder: \"Path to store your dashboard\",\n              type: \"text\",\n              value: path,\n              name: \"dashboard-path\",\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"bg-[#062F6F] hover:bg-[#5779E8] text-white rounded w-full p-1 mt-4\",\n              type: \"submit\",\n              children: \"Submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"bg-[#5779E8] text-white rounded w-full p-1 mt-2\",\n              type: \"button\",\n              onClick: closeModal,\n              children: \"Close\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n}\n_s(CreateModal, \"fMH+W+mA47w0VHM80p3hlR+h1mQ=\", false, function () {\n  return [useNavigate];\n});\n_c = CreateModal;\nCreateModal.propTypes = {\n  modalIsOpen: PropTypes.bool.isRequired,\n  dashboards: PropTypes.array,\n  setDashboards: PropTypes.func.isRequired,\n  setIsOpen: PropTypes.func.isRequired\n};\nexport default CreateModal;\nvar _c;\n$RefreshReg$(_c, \"CreateModal\");","map":{"version":3,"names":["useState","useEffect","useNavigate","React","Modal","PropTypes","jsxDEV","_jsxDEV","CreateModal","dashboards","setDashboards","modalIsOpen","setIsOpen","_s","name","setName","description","setDescription","path","setPath","navigate","widgets","fetchDashboards","response","fetch","data","json","err","console","error","dashboardData","e","preventDefault","requestBody","Table","Chart","log","result","method","headers","body","JSON","stringify","closeModal","modalStyles","overlay","backgroundColor","children","className","isOpen","onRequestClose","style","onSubmit","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","onChange","target","value","placeholder","type","required","onClick","_c","propTypes","bool","isRequired","array","func","$RefreshReg$"],"sources":["/Users/caletiwar/Desktop/Dashboard-Builder-React-charul/frontend/src/components/CreateModal.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport React from \"react\";\nimport Modal from 'react-modal';\nimport PropTypes from 'prop-types';\n\nfunction CreateModal({ dashboards, setDashboards, modalIsOpen, setIsOpen }) {\n    const [name, setName] = useState(\"\");\n    const [description, setDescription] = useState(\"\");\n    const [path, setPath] = useState(\"\");\n    const navigate = useNavigate();\n    const widgets = {\"Table\": [], \"Chart\": []};\n\n    useEffect(() => {\n        // Fetch dashboards from backend and update state\n        const fetchDashboards = async () => {\n            try {\n                const response = await fetch('http://localhost:3003/');\n                const data = await response.json();\n                setDashboards(data);\n            } catch (err) {\n                console.error(\"Error fetching dashboards:\", err);\n            }\n        };\n        fetchDashboards();\n    }, [setDashboards]);\n\n    const dashboardData = async (e) => {\n        e.preventDefault();\n        try {\n            const requestBody = { \n                name, \n                description, \n                path, \n                widgets: { Table: [], Chart: [] } // Ensure widgets structure is included\n            };\n            console.log(\"Request Body:\", requestBody);\n    \n            let result = await fetch('http://localhost:3003/post', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(requestBody),\n            });\n    \n            result = await result.json();\n            console.log(\"Response:\", result);\n    \n            setDashboards([...dashboards, result]);\n    \n            setName(\"\");\n            setDescription(\"\");\n            setPath(\"\");\n            closeModal();\n            navigate(`/dashboard/${result.path}`);\n        } catch (err) {\n            console.error(\"Error posting dashboard:\", err);\n        }\n    };\n    \n\n    function closeModal() {\n        setIsOpen(false);\n    }\n\n    const modalStyles = {\n        overlay: {\n            backgroundColor: 'rgba(0, 0, 0, 0.5)',\n        },\n    };\n\n    return (\n        <div>\n            <Modal\n                className=\"h-1/2 absolute top-24 left-1/3 rounded w-1/3 bg-slate-50 shadow\"\n                isOpen={modalIsOpen}\n                onRequestClose={closeModal}\n                style={modalStyles}\n            >\n                <div className=\"mt-3\">\n                    <form className=\"p-5\" onSubmit={dashboardData}>\n                        <div className=\"flex mb-3 flex-col\">\n                            <label className=\"text-lg font-bold\" htmlFor=\"dashboard-name\">Dashboard Name:</label>\n                            <input \n                                className=\"rounded p-2 border\"\n                                onChange={(e) => setName(e.target.value)}\n                                placeholder=\"Your Dashboard Name\" \n                                type=\"text\"\n                                value={name} \n                                name=\"dashboard-name\" \n                                required \n                            />\n                        </div>\n\n                        <div className=\"flex mb-3 flex-col\">\n                            <label className=\"text-lg font-bold\" htmlFor=\"dashboard-description\">Dashboard Description:</label>\n                            <textarea \n                                className=\"rounded p-2 border\"\n                                onChange={(e) => setDescription(e.target.value)}\n                                placeholder=\"Add Description\" \n                                name=\"dashboard-description\" \n                                value={description} \n                                required\n                            ></textarea>\n                        </div>\n\n                        <div className=\"flex flex-col\">\n                            <label className=\"text-lg font-bold\" htmlFor=\"dashboard-path\">Dashboard Path:</label>\n                            <input \n                                className=\"rounded p-2 border\"\n                                onChange={(e) => setPath(e.target.value)}\n                                placeholder=\"Path to store your dashboard\" \n                                type=\"text\" \n                                value={path} \n                                name=\"dashboard-path\" \n                                required \n                            />\n                        </div>\n\n                        <div>\n                            <button \n                                className=\"bg-[#062F6F] hover:bg-[#5779E8] text-white rounded w-full p-1 mt-4\" \n                                type=\"submit\"\n                            >\n                                Submit\n                            </button>\n                            <button \n                                className=\"bg-[#5779E8] text-white rounded w-full p-1 mt-2\" \n                                type=\"button\"\n                                onClick={closeModal}\n                            >\n                                Close\n                            </button>\n                        </div>\n                    </form>\n                </div>\n            </Modal>\n        </div>\n    );\n}\n\nCreateModal.propTypes = {\n    modalIsOpen: PropTypes.bool.isRequired,\n    dashboards: PropTypes.array,\n    setDashboards: PropTypes.func.isRequired,\n    setIsOpen: PropTypes.func.isRequired\n};\n\nexport default CreateModal;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}